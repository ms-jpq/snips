snippet prelude
  #!/usr/bin/env -S -- sql --shebang

  $0


snippet ansi-schemas
abbr ANSI -> schemas
  SELECT
    *
  FROM
    information_schema.schemata;

  $0


snippet ansi-tables
abbr ANSI -> tables
  SELECT
    table_type,
    table_name,
    STRING_AGG(column_name, ',' ORDER BY column_name) AS columns,
    table_schema
  FROM
    information_schema.tables
    JOIN information_schema.columns USING (table_schema, table_name)
  GROUP BY
    table_type,
    table_schema,
    table_name
  HAVING
    table_schema LIKE '%public%'
    AND table_name LIKE '%${1:table}%'
  ORDER BY
    table_schema,
    table_type,
    table_name;

  $0


snippet ansi-views
abbr ANSI -> views
  SELECT
    table_name,
    ARRAY_AGG(column_name) AS columns,
    table_schema
  FROM
    information_schema.views
    JOIN information_schema.columns USING (table_schema, table_name)
  GROUP BY
    table_schema,
    table_name
  HAVING
    table_schema LIKE '%public%'
    AND table_name LIKE '%${1:view}%'
  ORDER BY
    table_schema,
    table_name;

  $0


snippet ansi-columns
abbr ANSI -> columns
  SELECT
    table_name,
    column_name,
    is_nullable,
    data_type,
    column_default,
    table_schema
  FROM
    information_schema.columns
  WHERE
    table_schema LIKE '%public%'
    AND table_name LIKE '%${1:table}%'
    AND column_name LIKE '%${2:column}%'
  ORDER BY
    table_schema,
    table_name,
    column_name,
    is_nullable DESC,
    data_type,
    column_default;

  $0


snippet pg-enums
abbr PG -> enum type
  SELECT
    pg_type.typname,
    pg_enum.enumlabel
  FROM
    pg_type
    JOIN pg_enum ON pg_enum.enumtypid = pg_type.oid
  WHERE
    pg_type.typname LIKE '%${1:enum}%';

  $0


snippet ansi-constraints
abbr ANSI -> constraints
  WITH
    constraints AS (
      SELECT
        kcu.table_name,
        kcu.column_name,
        kcu.constraint_name,
        tc.constraint_type,
        kcu.table_schema
      FROM
        information_schema.key_column_usage AS kcu
        JOIN information_schema.table_constraints AS tc USING (table_schema, table_name, constraint_name)
    ),
    v AS (
      SELECT
        c.table_name,
        c.column_name,
        c.is_nullable,
        c.data_type,
        c.column_default,
        ARRAY_AGG(cs.constraint_type) AS constraints,
        ARRAY_AGG(cs.constraint_name) AS constraint_names,
        c.table_schema
      FROM
        information_schema.columns AS c
        LEFT JOIN constraints AS cs USING (table_schema, table_name, column_name)
      GROUP BY
        c.table_schema,
        c.table_name,
        c.column_name,
        c.data_type,
        c.is_nullable,
        c.column_default
    )
  SELECT
    *
  FROM
    v
  WHERE
    table_schema LIKE '%public%'
    AND table_name LIKE '%${1:table}%'
  ORDER BY
    table_schema,
    table_name,
    is_nullable DESC,
    data_type,
    column_default,
    constraints,
    constraint_names,
    column_name;

  $0


snippet ansi-fk
abbr ANSI -> foreign keys
  WITH
    v AS (
      SELECT
        kcu2.table_name AS ref_tbl,
        kcu1.table_name AS tbl,
        kcu2.column_name AS ref_col,
        kcu1.column_name AS col,
        kcu2.table_schema AS ref_shm,
        kcu1.table_schema AS shm
      FROM
        information_schema.referential_constraints AS rc
        JOIN information_schema.key_column_usage AS kcu1 USING (constraint_schema, constraint_name)
        JOIN information_schema.key_column_usage AS kcu2 ON kcu2.constraint_schema = rc.unique_constraint_schema
        AND kcu2.constraint_name = rc.unique_constraint_name
    )
  SELECT
    *
  FROM
    v
  WHERE
    (
      shm LIKE '%public%'
      OR ref_shm LIKE '%public%'
    )
    AND (
      tbl LIKE '%${1:table}%'
      OR ref_tbl LIKE '%${1:table}%'
    )
    AND (
      col LIKE '%${2:column}%'
      OR ref_col LIKE '%${2:column}%'
    )
  ORDER BY
    ref_shm,
    ref_tbl,
    ref_col,
    shm,
    tbl,
    col;

  $0


snippet readonly
  SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY;

  $0
